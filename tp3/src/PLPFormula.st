Object subclass: #PropositionalFormula	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormula'!!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:44'!==> aFormula	"Construye la implicacion de la formula actual con aFormula"	^Implication of: self and: aFormula.! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:46'!not	"Construye la negacion de la formula actual"	^Negation of: self.! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:46'!| aFormula	"Construye la disjuncion de la formula actual con aFormula"	^Disjunction of: self and: aFormula.! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:45'!hash	"Responde una funcion de hash de la formula"	^ (self asString) hash.! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/24/2016 10:45'!= aForm	"Responde si dos formulas son equivalentes"	^ (aForm isKindOf: PropositionalFormula) & (self asString = aForm asString).! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:46'!printString	"Imprime la formula"	^ self asString! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:44'!& aFormula	"Construye la conjuncion de la formula actual con aFormula"	^Conjunction of: self and: aFormula.! !PropositionalFormula subclass: #BinaryPropositionalFormula	instanceVariableNames: 'l_prop r_prop'	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormula'!!BinaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:50'!value: aCollection	"Evalua la formula con asignando las variables de la formula segun aCollection"	| lvalue rvalue m|	lvalue := l_prop value: aCollection.	rvalue := r_prop value: aCollection.	m := Message selector: (self class) operation argument: rvalue.	^ m sendTo: lvalue.! !!BinaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:49'!toNNF	"Devuelve la forma normal negada de la formula"	^ (self class) of: (l_prop toNNF) and: (r_prop toNNF).! !!BinaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/24/2016 11:04'!allPropVars	"Devuelve los nombres de las variables proposicionales presentes en la formula"	^ (l_prop allPropVars) union: (r_prop allPropVars).! !!BinaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:48'!asString	"Responde la formula en forma de string"	|s_l s_r|	s_l := l_prop asString.	s_r := r_prop asString.	(l_prop isKindOf: BinaryPropositionalFormula) ifTrue: [ s_l := '( ' , s_l , ' )' ].	(r_prop isKindOf: BinaryPropositionalFormula) ifTrue: [ s_r := '( ' , s_r , ' )' ].	^ s_l , ' ' , ((self class) operation) asString , ' ' , s_r.! !!BinaryPropositionalFormula methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/24/2016 11:11'!lprop: alprop rprop: arprop	"Asigna las formulas de la izquierda y derecha respectivamente"	l_prop := alprop.	r_prop := arprop.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BinaryPropositionalFormula class	instanceVariableNames: ''!!BinaryPropositionalFormula class methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/24/2016 11:02'!of: alprop and: arprop	"Construye una formula proposicional con sus respectivas formulas izquierda y derecha"	^self new lprop: alprop rprop: arprop.! !BinaryPropositionalFormula subclass: #Conjunction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormula'!!Conjunction methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:51'!negate	"Niega la formula"	^ Disjunction of: (l_prop negate) and: (r_prop negate)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Conjunction class	instanceVariableNames: ''!!Conjunction class methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:59'!operation	"Devuelve el simbolo de la operacion conjuncion"	^#&! !BinaryPropositionalFormula subclass: #Disjunction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormula'!!Disjunction methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:51'!negate	"Niega la formula"	^ Conjunction of: (l_prop negate) and: (r_prop negate)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Disjunction class	instanceVariableNames: ''!!Disjunction class methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 21:00'!operation	"Devuelve el simbolo de la operacion disjuncion"	^#|! !BinaryPropositionalFormula subclass: #Implication	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormula'!!Implication methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:52'!toNNF	"Devuelve la forma normal negada de la formula"	^ Disjunction of: (l_prop not toNNF) and: (r_prop toNNF)! !!Implication methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:51'!negate	"Niega la formula"	^ Conjunction of: l_prop and: (r_prop negate)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Implication class	instanceVariableNames: ''!!Implication class methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 21:00'!operation	"Devuelve el simbolo de la operacion implicacion"	^#==>! !PropositionalFormula subclass: #Negation	instanceVariableNames: 'prop'	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormula'!!Negation methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/24/2016 11:05'!value: aCollection	"Evalua la formula poniendo en true las que variables proposicionales que aparecen en aCollection"	^ (prop value: aCollection) not.! !!Negation methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:55'!toNNF	"Devuelve la forma normal negada de la formula"	(prop isKindOf: PropositionalVariable) ifTrue: [ ^ self. ].	^ prop negate toNNF.! !!Negation methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:53'!negate	"Niega la formula"	^ prop.! !!Negation methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:53'!asString	"Devuelve el string de la formula"	|s|	s := prop asString.	(prop isKindOf: BinaryPropositionalFormula) ifTrue: [ s := '( ' , s , ' )' ].	^ '¬', s.! !!Negation methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:52'!allPropVars	"Devuelve los nombre de las variables proposicionales que aparecen en la formula"	^ prop allPropVars.! !!Negation methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/24/2016 11:09'!prop: aprop	"Asigna aprop a la formula dentro de la negacion"	prop := aprop.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Negation class	instanceVariableNames: ''!!Negation class methodsFor: 'creating' stamp: 'AzucarSintactico 6/24/2016 11:05'!of: aprop	"Construye una negacion"	^self new prop: aprop.! !PropositionalFormula subclass: #PropositionalVariable	instanceVariableNames: 'nombre'	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormula'!!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:58'!value: aCollection	"Devuelve true si la variable esta en aCollection, false en caso contrario"	^ aCollection includes: nombre.! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/21/2016 20:57'!asString	"Imprime la variable proposicional"	^ nombre asString.! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'AzucarSintactico 6/24/2016 11:08'!nombre: aString	"Asigna el nombre aString al nombre de la variable proposicional"	nombre := aString.	! !!PropositionalVariable methodsFor: 'accesing' stamp: 'AzucarSintactico 6/21/2016 20:58'!toNNF	"Devuelve la forma normal negada de la variabale proposicional"	^ self.! !!PropositionalVariable methodsFor: 'accesing' stamp: 'AzucarSintactico 6/21/2016 20:57'!negate	"Niega la variable proposicional"	^ Negation of: self.! !!PropositionalVariable methodsFor: 'accesing' stamp: 'AzucarSintactico 6/21/2016 20:57'!allPropVars	"Devuelve el singleton con la variable proposicionl"	^ Set with: nombre.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PropositionalVariable class	instanceVariableNames: ''!!PropositionalVariable class methodsFor: 'creating' stamp: 'AzucarSintactico 6/24/2016 11:06'!named: aString 	"Construye una nueva variable proposicional"	^self new nombre: aString! !